import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Layer, MapMouseEvent, MapTouchEvent, SourceSpecification } from 'mapbox-gl';
import { MapService } from '../map/map.service';
import { LayerEvents } from '../map/map.types';
import * as i0 from "@angular/core";
export declare class LayerComponent implements OnInit, OnDestroy, OnChanges, Omit<Layer, 'source'>, LayerEvents {
    private mapService;
    id: Layer['id'];
    source?: SourceSpecification | Layer['source'];
    type: Layer['type'];
    metadata?: Layer['metadata'];
    sourceLayer?: Layer['source-layer'];
    filter?: Layer['filter'];
    layout?: Layer['layout'];
    paint?: Layer['paint'];
    before?: string;
    minzoom?: Layer['minzoom'];
    maxzoom?: Layer['maxzoom'];
    layerClick: EventEmitter<MapMouseEvent>;
    layerDblClick: EventEmitter<MapMouseEvent>;
    layerMouseDown: EventEmitter<MapMouseEvent>;
    layerMouseUp: EventEmitter<MapMouseEvent>;
    layerMouseEnter: EventEmitter<MapMouseEvent>;
    layerMouseLeave: EventEmitter<MapMouseEvent>;
    layerMouseMove: EventEmitter<MapMouseEvent>;
    layerMouseOver: EventEmitter<MapMouseEvent>;
    layerMouseOut: EventEmitter<MapMouseEvent>;
    layerContextMenu: EventEmitter<MapMouseEvent>;
    layerTouchStart: EventEmitter<MapTouchEvent>;
    layerTouchEnd: EventEmitter<MapTouchEvent>;
    layerTouchCancel: EventEmitter<MapTouchEvent>;
    private layerAdded;
    private sub;
    constructor(mapService: MapService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    get inlineLayerSourceId(): string;
    private init;
    static ɵfac: i0.ɵɵFactoryDeclaration<LayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LayerComponent, "mgl-layer", never, { "id": { "alias": "id"; "required": false; }; "source": { "alias": "source"; "required": false; }; "type": { "alias": "type"; "required": false; }; "metadata": { "alias": "metadata"; "required": false; }; "sourceLayer": { "alias": "sourceLayer"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "layout": { "alias": "layout"; "required": false; }; "paint": { "alias": "paint"; "required": false; }; "before": { "alias": "before"; "required": false; }; "minzoom": { "alias": "minzoom"; "required": false; }; "maxzoom": { "alias": "maxzoom"; "required": false; }; }, { "layerClick": "layerClick"; "layerDblClick": "layerDblClick"; "layerMouseDown": "layerMouseDown"; "layerMouseUp": "layerMouseUp"; "layerMouseEnter": "layerMouseEnter"; "layerMouseLeave": "layerMouseLeave"; "layerMouseMove": "layerMouseMove"; "layerMouseOver": "layerMouseOver"; "layerMouseOut": "layerMouseOut"; "layerContextMenu": "layerContextMenu"; "layerTouchStart": "layerTouchStart"; "layerTouchEnd": "layerTouchEnd"; "layerTouchCancel": "layerTouchCancel"; }, never, never, false, never>;
}
