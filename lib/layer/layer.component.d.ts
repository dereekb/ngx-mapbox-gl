import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import type { MapMouseEvent, MapTouchEvent, SourceSpecification, LayerSpecification } from 'mapbox-gl';
import { LayerEvents } from '../map/map.types';
import * as i0 from "@angular/core";
type AnyLayerSource = LayerSpecification['source'] | SourceSpecification;
export declare class LayerComponent implements OnInit, OnDestroy, OnChanges, LayerEvents {
    private mapService;
    id: import("@angular/core").InputSignal<string>;
    source: import("@angular/core").InputSignal<AnyLayerSource>;
    type: import("@angular/core").InputSignal<"symbol" | "slot" | "fill" | "line" | "circle" | "heatmap" | "fill-extrusion" | "raster" | "raster-particle" | "hillshade" | "model" | "background" | "sky" | "clip">;
    metadata: import("@angular/core").InputSignal<unknown>;
    sourceLayer: import("@angular/core").InputSignal<string | undefined>;
    filter: import("@angular/core").InputSignal<import("mapbox-gl").FilterSpecification | undefined>;
    layout: import("@angular/core").InputSignal<{
        "fill-sort-key"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
        "fill-elevation-reference"?: "none" | "hd-road-base" | "hd-road-markup" | import("mapbox-gl").ExpressionSpecification;
        "fill-construct-bridge-guard-rail"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<boolean>;
    } | {
        "line-cap"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<"butt" | "round" | "square">;
        "line-join"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<"bevel" | "round" | "miter" | "none">;
        "line-miter-limit"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "line-round-limit"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "line-sort-key"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-z-offset"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-elevation-reference"?: "none" | "sea" | "ground" | "hd-road-markup" | import("mapbox-gl").ExpressionSpecification;
        "line-cross-slope"?: import("mapbox-gl").ExpressionSpecification;
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
        "line-width-unit"?: import("mapbox-gl").PropertyValueSpecification<"pixels" | "meters">;
    } | {
        "symbol-placement"?: import("mapbox-gl").PropertyValueSpecification<"point" | "line" | "line-center">;
        "symbol-spacing"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "symbol-avoid-edges"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "symbol-sort-key"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "symbol-z-order"?: import("mapbox-gl").PropertyValueSpecification<"auto" | "viewport-y" | "source">;
        "symbol-z-elevate"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "symbol-elevation-reference"?: import("mapbox-gl").PropertyValueSpecification<"sea" | "ground" | "hd-road-markup">;
        "icon-allow-overlap"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "icon-ignore-placement"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "icon-optional"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "icon-rotation-alignment"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport" | "auto">;
        "icon-size"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-size-scale-range"?: import("mapbox-gl").ExpressionSpecification;
        "icon-text-fit"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<"none" | "width" | "height" | "both">;
        "icon-text-fit-padding"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<[number, number, number, number]>;
        "icon-image"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ResolvedImageSpecification>;
        "icon-rotate"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-padding"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "icon-keep-upright"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "icon-offset"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<[number, number]>;
        "icon-anchor"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "icon-pitch-alignment"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport" | "auto">;
        "text-pitch-alignment"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport" | "auto">;
        "text-rotation-alignment"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport" | "auto">;
        "text-field"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").FormattedSpecification>;
        "text-font"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<Array<string>>;
        "text-size"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-size-scale-range"?: import("mapbox-gl").ExpressionSpecification;
        "text-max-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-line-height"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-letter-spacing"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-justify"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<"auto" | "left" | "center" | "right">;
        "text-radial-offset"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-variable-anchor"?: import("mapbox-gl").PropertyValueSpecification<Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">>;
        "text-anchor"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "text-max-angle"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "text-writing-mode"?: import("mapbox-gl").PropertyValueSpecification<Array<"horizontal" | "vertical">>;
        "text-rotate"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-padding"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "text-keep-upright"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "text-transform"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<"none" | "uppercase" | "lowercase">;
        "text-offset"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<[number, number]>;
        "text-allow-overlap"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "text-ignore-placement"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "text-optional"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        "circle-sort-key"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "circle-elevation-reference"?: "none" | "hd-road-markup" | import("mapbox-gl").ExpressionSpecification;
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
        "fill-extrusion-edge-radius"?: import("mapbox-gl").ExpressionSpecification;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
        "model-id"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<string>;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        visibility?: "visible" | "none" | import("mapbox-gl").ExpressionSpecification;
    } | {
        "clip-layer-types"?: import("mapbox-gl").ExpressionSpecification;
        "clip-layer-scope"?: import("mapbox-gl").ExpressionSpecification;
    } | undefined>;
    paint: import("@angular/core").InputSignal<{
        "fill-antialias"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "fill-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "fill-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "fill-outline-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "fill-outline-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-outline-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "fill-translate"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "fill-translate-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-translate-anchor"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "fill-pattern"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ResolvedImageSpecification>;
        "fill-emissive-strength"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-z-offset"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-z-offset-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-bridge-guard-rail-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "fill-bridge-guard-rail-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-bridge-guard-rail-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "fill-tunnel-structure-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "fill-tunnel-structure-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-tunnel-structure-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
    } | {
        "line-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "line-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "line-translate"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "line-translate-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-translate-anchor"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "line-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-width-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-gap-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-gap-width-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-offset"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-offset-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-blur"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-blur-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-dasharray"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<Array<number>>;
        "line-pattern"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ResolvedImageSpecification>;
        "line-gradient"?: import("mapbox-gl").ExpressionSpecification;
        "line-gradient-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "line-trim-offset"?: [number, number];
        "line-trim-fade-range"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "line-trim-color"?: import("mapbox-gl").PropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "line-trim-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-trim-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "line-emissive-strength"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "line-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-border-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "line-border-width-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-border-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "line-border-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "line-border-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "line-occlusion-opacity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "line-occlusion-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "icon-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-occlusion-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-occlusion-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-emissive-strength"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-emissive-strength"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "icon-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "icon-halo-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "icon-halo-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-halo-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "icon-halo-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-halo-width-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-halo-blur"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-halo-blur-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-translate"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "icon-translate-transition"?: import("mapbox-gl").TransitionSpecification;
        "icon-translate-anchor"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "icon-image-cross-fade"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "icon-image-cross-fade-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-occlusion-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-occlusion-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "text-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "text-halo-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "text-halo-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-halo-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "text-halo-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-halo-width-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-halo-blur"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "text-halo-blur-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-translate"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "text-translate-transition"?: import("mapbox-gl").TransitionSpecification;
        "text-translate-anchor"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "icon-color-saturation"?: import("mapbox-gl").ExpressionSpecification;
        "icon-color-contrast"?: import("mapbox-gl").ExpressionSpecification;
        "icon-color-brightness-min"?: import("mapbox-gl").ExpressionSpecification;
        "icon-color-brightness-max"?: import("mapbox-gl").ExpressionSpecification;
        "symbol-z-offset"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "symbol-z-offset-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "circle-radius"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "circle-radius-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "circle-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "circle-blur"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "circle-blur-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "circle-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-translate"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "circle-translate-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-translate-anchor"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "circle-pitch-scale"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "circle-pitch-alignment"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "circle-stroke-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "circle-stroke-width-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-stroke-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "circle-stroke-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-stroke-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "circle-stroke-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "circle-stroke-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "circle-emissive-strength"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "circle-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "heatmap-radius"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "heatmap-radius-transition"?: import("mapbox-gl").TransitionSpecification;
        "heatmap-weight"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "heatmap-intensity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "heatmap-intensity-transition"?: import("mapbox-gl").TransitionSpecification;
        "heatmap-color"?: import("mapbox-gl").ExpressionSpecification;
        "heatmap-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "heatmap-opacity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "heatmap-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "fill-extrusion-opacity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "fill-extrusion-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "fill-extrusion-translate"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "fill-extrusion-translate-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-translate-anchor"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "fill-extrusion-pattern"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ResolvedImageSpecification>;
        "fill-extrusion-height"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-extrusion-height-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-base"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-extrusion-base-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-height-alignment"?: "terrain" | "flat";
        "fill-extrusion-base-alignment"?: "terrain" | "flat";
        "fill-extrusion-vertical-gradient"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "fill-extrusion-ambient-occlusion-intensity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-ambient-occlusion-intensity-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-ambient-occlusion-radius"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-ambient-occlusion-radius-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-ambient-occlusion-wall-radius"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-ambient-occlusion-wall-radius-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-ambient-occlusion-ground-radius"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-ambient-occlusion-ground-radius-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-ambient-occlusion-ground-attenuation"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-ambient-occlusion-ground-attenuation-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-flood-light-color"?: import("mapbox-gl").PropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "fill-extrusion-flood-light-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-flood-light-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "fill-extrusion-flood-light-intensity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-flood-light-intensity-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-flood-light-wall-radius"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-extrusion-flood-light-wall-radius-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-flood-light-ground-radius"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-extrusion-flood-light-ground-radius-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-flood-light-ground-attenuation"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-flood-light-ground-attenuation-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-vertical-scale"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "fill-extrusion-vertical-scale-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-rounded-roof"?: import("mapbox-gl").PropertyValueSpecification<boolean>;
        "fill-extrusion-cutoff-fade-range"?: import("mapbox-gl").ExpressionSpecification;
        "fill-extrusion-emissive-strength"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-extrusion-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-line-width"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "fill-extrusion-line-width-transition"?: import("mapbox-gl").TransitionSpecification;
        "fill-extrusion-cast-shadows"?: boolean;
    } | {
        "raster-opacity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-color"?: import("mapbox-gl").ExpressionSpecification;
        "raster-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "raster-color-mix"?: import("mapbox-gl").PropertyValueSpecification<[number, number, number, number]>;
        "raster-color-mix-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-color-range"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "raster-color-range-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-hue-rotate"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-hue-rotate-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-brightness-min"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-brightness-min-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-brightness-max"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-brightness-max-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-saturation"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-saturation-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-contrast"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-contrast-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-resampling"?: import("mapbox-gl").PropertyValueSpecification<"linear" | "nearest">;
        "raster-fade-duration"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-emissive-strength"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-array-band"?: string;
        "raster-elevation"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-elevation-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "raster-particle-array-band"?: string;
        "raster-particle-count"?: number;
        "raster-particle-color"?: import("mapbox-gl").ExpressionSpecification;
        "raster-particle-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "raster-particle-max-speed"?: number;
        "raster-particle-speed-factor"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-particle-speed-factor-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-particle-fade-opacity-factor"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-particle-fade-opacity-factor-transition"?: import("mapbox-gl").TransitionSpecification;
        "raster-particle-reset-rate-factor"?: number;
        "raster-particle-elevation"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "raster-particle-elevation-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "hillshade-illumination-direction"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "hillshade-illumination-anchor"?: import("mapbox-gl").PropertyValueSpecification<"map" | "viewport">;
        "hillshade-exaggeration"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "hillshade-exaggeration-transition"?: import("mapbox-gl").TransitionSpecification;
        "hillshade-shadow-color"?: import("mapbox-gl").PropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "hillshade-shadow-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "hillshade-shadow-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "hillshade-highlight-color"?: import("mapbox-gl").PropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "hillshade-highlight-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "hillshade-highlight-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "hillshade-accent-color"?: import("mapbox-gl").PropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "hillshade-accent-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "hillshade-accent-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "hillshade-emissive-strength"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "hillshade-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "model-opacity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "model-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-rotation"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<[number, number, number]>;
        "model-rotation-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-scale"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<[number, number, number]>;
        "model-scale-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-translation"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<[number, number, number]>;
        "model-translation-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-color"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "model-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "model-color-mix-intensity"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "model-color-mix-intensity-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-type"?: "common-3d" | "location-indicator";
        "model-cast-shadows"?: boolean;
        "model-receive-shadows"?: boolean;
        "model-ambient-occlusion-intensity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "model-ambient-occlusion-intensity-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-emissive-strength"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "model-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-roughness"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<number>;
        "model-roughness-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-height-based-emissive-strength-multiplier"?: import("mapbox-gl").DataDrivenPropertyValueSpecification<[number, number, number, number, number]>;
        "model-height-based-emissive-strength-multiplier-transition"?: import("mapbox-gl").TransitionSpecification;
        "model-cutoff-fade-range"?: import("mapbox-gl").ExpressionSpecification;
        "model-front-cutoff"?: import("mapbox-gl").PropertyValueSpecification<[number, number, number]>;
    } | {
        "background-pitch-alignment"?: "map" | "viewport" | import("mapbox-gl").ExpressionSpecification;
        "background-color"?: import("mapbox-gl").PropertyValueSpecification<import("mapbox-gl").ColorSpecification>;
        "background-color-transition"?: import("mapbox-gl").TransitionSpecification;
        "background-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "background-pattern"?: import("mapbox-gl").PropertyValueSpecification<import("mapbox-gl").ResolvedImageSpecification>;
        "background-opacity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "background-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
        "background-emissive-strength"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "background-emissive-strength-transition"?: import("mapbox-gl").TransitionSpecification;
    } | {
        "sky-type"?: import("mapbox-gl").PropertyValueSpecification<"gradient" | "atmosphere">;
        "sky-atmosphere-sun"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "sky-atmosphere-sun-intensity"?: number;
        "sky-gradient-center"?: import("mapbox-gl").PropertyValueSpecification<[number, number]>;
        "sky-gradient-radius"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "sky-gradient"?: import("mapbox-gl").ExpressionSpecification;
        "sky-gradient-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "sky-atmosphere-halo-color"?: import("mapbox-gl").ColorSpecification;
        "sky-atmosphere-halo-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "sky-atmosphere-color"?: import("mapbox-gl").ColorSpecification;
        "sky-atmosphere-color-use-theme"?: import("mapbox-gl").PropertyValueSpecification<string>;
        "sky-opacity"?: import("mapbox-gl").PropertyValueSpecification<number>;
        "sky-opacity-transition"?: import("mapbox-gl").TransitionSpecification;
    } | undefined>;
    before: import("@angular/core").InputSignal<string | undefined>;
    minzoom: import("@angular/core").InputSignal<number | undefined>;
    maxzoom: import("@angular/core").InputSignal<number | undefined>;
    layerClick: EventEmitter<MapMouseEvent>;
    layerDblClick: EventEmitter<MapMouseEvent>;
    layerMouseDown: EventEmitter<MapMouseEvent>;
    layerMouseUp: EventEmitter<MapMouseEvent>;
    layerMouseEnter: EventEmitter<MapMouseEvent>;
    layerMouseLeave: EventEmitter<MapMouseEvent>;
    layerMouseMove: EventEmitter<MapMouseEvent>;
    layerMouseOver: EventEmitter<MapMouseEvent>;
    layerMouseOut: EventEmitter<MapMouseEvent>;
    layerContextMenu: EventEmitter<MapMouseEvent>;
    layerTouchStart: EventEmitter<MapTouchEvent>;
    layerTouchEnd: EventEmitter<MapTouchEvent>;
    layerTouchCancel: EventEmitter<MapTouchEvent>;
    private layerAdded;
    private sub;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private init;
    static ɵfac: i0.ɵɵFactoryDeclaration<LayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LayerComponent, "mgl-layer", never, { "id": { "alias": "id"; "required": true; "isSignal": true; }; "source": { "alias": "source"; "required": false; "isSignal": true; }; "type": { "alias": "type"; "required": true; "isSignal": true; }; "metadata": { "alias": "metadata"; "required": false; "isSignal": true; }; "sourceLayer": { "alias": "sourceLayer"; "required": false; "isSignal": true; }; "filter": { "alias": "filter"; "required": false; "isSignal": true; }; "layout": { "alias": "layout"; "required": false; "isSignal": true; }; "paint": { "alias": "paint"; "required": false; "isSignal": true; }; "before": { "alias": "before"; "required": false; "isSignal": true; }; "minzoom": { "alias": "minzoom"; "required": false; "isSignal": true; }; "maxzoom": { "alias": "maxzoom"; "required": false; "isSignal": true; }; }, { "layerClick": "layerClick"; "layerDblClick": "layerDblClick"; "layerMouseDown": "layerMouseDown"; "layerMouseUp": "layerMouseUp"; "layerMouseEnter": "layerMouseEnter"; "layerMouseLeave": "layerMouseLeave"; "layerMouseMove": "layerMouseMove"; "layerMouseOver": "layerMouseOver"; "layerMouseOut": "layerMouseOut"; "layerContextMenu": "layerContextMenu"; "layerTouchStart": "layerTouchStart"; "layerTouchEnd": "layerTouchEnd"; "layerTouchCancel": "layerTouchCancel"; }, never, never, true, never>;
}
export {};
