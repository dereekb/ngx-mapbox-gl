import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import type { LngLatLike, Marker } from 'mapbox-gl';
import * as i0 from "@angular/core";
export declare class MarkerComponent implements OnChanges, OnDestroy, AfterViewInit, OnInit {
    private mapService;
    offset: import("@angular/core").InputSignal<import("mapbox-gl").PointLike | undefined>;
    anchor: import("@angular/core").InputSignal<import("mapbox-gl").Anchor | undefined>;
    clickTolerance: import("@angular/core").InputSignal<number | undefined>;
    feature: import("@angular/core").InputSignal<import("geojson").Feature<import("geojson").Point, import("geojson").GeoJsonProperties> | undefined>;
    lngLat: import("@angular/core").InputSignal<LngLatLike | undefined>;
    draggable: import("@angular/core").InputSignal<boolean | undefined>;
    popupShown: import("@angular/core").InputSignal<boolean | undefined>;
    className: import("@angular/core").InputSignal<string | undefined>;
    zIndex: import("@angular/core").InputSignal<number | undefined>;
    pitchAlignment: import("@angular/core").InputSignal<string | undefined>;
    rotationAlignment: import("@angular/core").InputSignal<string | undefined>;
    markerDragStart: EventEmitter<Marker>;
    markerDragEnd: EventEmitter<Marker>;
    markerDrag: EventEmitter<Marker>;
    readonly content: import("@angular/core").Signal<ElementRef<any> | undefined>;
    markerInstance?: Marker;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    togglePopup(): void;
    updateCoordinates(coordinates: number[]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MarkerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MarkerComponent, "mgl-marker", never, { "offset": { "alias": "offset"; "required": false; "isSignal": true; }; "anchor": { "alias": "anchor"; "required": false; "isSignal": true; }; "clickTolerance": { "alias": "clickTolerance"; "required": false; "isSignal": true; }; "feature": { "alias": "feature"; "required": false; "isSignal": true; }; "lngLat": { "alias": "lngLat"; "required": false; "isSignal": true; }; "draggable": { "alias": "draggable"; "required": false; "isSignal": true; }; "popupShown": { "alias": "popupShown"; "required": false; "isSignal": true; }; "className": { "alias": "className"; "required": false; "isSignal": true; }; "zIndex": { "alias": "zIndex"; "required": false; "isSignal": true; }; "pitchAlignment": { "alias": "pitchAlignment"; "required": false; "isSignal": true; }; "rotationAlignment": { "alias": "rotationAlignment"; "required": false; "isSignal": true; }; }, { "markerDragStart": "markerDragStart"; "markerDragEnd": "markerDragEnd"; "markerDrag": "markerDrag"; }, never, ["*"], true, never>;
}
